/* Generated By:JavaCC: Do not edit this line. PrologSyntax.java */
package org.aspic.inference.parser;

import org.aspic.inference.*;

/**
 * JavaCC generated Parser from grammar file, PrologSyntax.jj.
 * Grammar defines production rules for:
 * <ul>
 * <li>Knowledge - a set of the Expressions</li>
 * <li>Expression - a fact or rule</li>
 * <li>TermList - A list of Terms.  Used for a rule antecedent (and maybe later a query)</li>
 * <li>Term - a fact</li>
 * <li>ParamList - the parameters of a Term</li>
 * <li>Param - a Term parameter (i.e. a Term, a Variable, a Constant, a Number) </li>
 * </ul>
 * @author mjs (matthew.south @ cancer.org.uk)
 */
public class PrologSyntax implements PrologSyntaxConstants {
  /**
   * This method allows you to run the parser in command line mode, to test it.
   * It prints a view of the knowledge base when you've finished.
   */
  public static void main(String args[]) throws ParseException {
    PrologSyntax parser = new PrologSyntax(System.in);
    KnowledgeBase kb = parser.Knowledge ();
    System.out.println("Succesfully parsed:\n" + kb.toString());
  }

  final public KnowledgeBase Knowledge() throws ParseException {
        KnowledgeBase kb = new KnowledgeBase();
        Rule e1;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEG:
      case IDN:
      case 31:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      e1 = Expression();
                              kb.addRule(e1);
    }
    jj_consume_token(0);
                                                           {if (true) return kb;}
    throw new Error("Missing return statement in function");
  }

  final public Rule Expression() throws ParseException {
        Constant name = null;
        Constant con;
        ElementList ant = null;
        Token beliefToken = null;
        Token caption = null;
        Token claimCaption = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
      name = Term();
      jj_consume_token(32);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    con = Term();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABW:
      jj_consume_token(ABW);
      ant = TermList();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      beliefToken = jj_consume_token(FLOAT);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(33);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CAPTION:
      caption = jj_consume_token(CAPTION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAPTION:
        claimCaption = jj_consume_token(CAPTION);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
                Rule result = null;
                if (beliefToken==null) {
                        if (ant==null) {
                                if (name==null) {
                                        // fact
                                        result = new Rule(con);
                                } else {
	            						// EK: Allow naming of facts
	            						result = new Rule(con, name);
                                        // error :: name supplied for fact
                                        //{if (true) throw new ParseException("Rule name, " + name.inspect() + " provided for Fact. Only Rules can be named.");}
                                }
                        } else {
                                if (name==null) {
                                        // strict rule
                                        result = new Rule(con, ant);
                                } else {
                                        // named strict rule
                                        result = new Rule(con, ant, 1.0, name);
                                }
                        }
                } else {
                        Double belief = Double.valueOf(beliefToken.image);
                        if (belief>0.0 & belief <=1.0) {
                                if (ant==null) {
                                        if (name==null) {
                                                // belief
                                                result = new Rule(con, belief);
                                        } else {
	                    						// EK: Allow naming of facts
	                    						result = new Rule(con, belief, name);
                                                // error :: name supplied for fact
                                                //{if (true) throw new ParseException("Rule name, " + name.inspect() + " provided for Fact. Only Rules can be named.");}
                                        }
                                } else {
                                        if (name==null) {
                                                // defeasible rule
                                                result = new Rule(con, ant, belief);
                                        } else {
                                                // named defeasible rule
                                                result = new Rule(con, ant, belief, name);
                                        }
                                }
                        } else {
                                {if (true) throw new ParseException("Found belief of " + beliefToken.image + ". Belief must be in the range (0, 1].");}
                        }
                }
                if (caption!=null) {
                        result.setCaption(caption.image.replace("$", ""));
                }
                if (claimCaption!=null) {
                        result.setClaimCaption(claimCaption.image.replace("$", ""));
                }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/** Added so that a Knowledge Editor can parse isolated Terms **/
  final public Constant IsolatedTermOrBuiltIn() throws ParseException {
        Constant term;
        BuiltIn builtIn;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEG:
    case IDN:
      term = Term();
      jj_consume_token(0);
                              {if (true) return term;}
      break;
    case PLUS:
    case MINUS:
    case TIMES:
    case DIVIDE:
    case GT:
    case LT:
    case GTE:
    case LTE:
    case IS:
    case EQ:
    case NEQ:
    case AEQ:
    case ANEQ:
    case NONVAR:
    case NAF:
      builtIn = BuiltIn();
                                {if (true) return builtIn;}
      jj_consume_token(0);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Constant TermOrBuiltIn() throws ParseException {
        Constant term;
        BuiltIn builtIn;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEG:
    case IDN:
      term = Term();
                        {if (true) return term;}
      break;
    case PLUS:
    case MINUS:
    case TIMES:
    case DIVIDE:
    case GT:
    case LT:
    case GTE:
    case LTE:
    case IS:
    case EQ:
    case NEQ:
    case AEQ:
    case ANEQ:
    case NONVAR:
    case NAF:
      builtIn = BuiltIn();
                                {if (true) return builtIn;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public BuiltIn BuiltIn() throws ParseException {
        Element operand = null;
        Element left = null;
        Element right = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      jj_consume_token(34);
      left = Param();
      jj_consume_token(35);
      right = Param();
      jj_consume_token(36);
                {if (true) return new Addition(left, right);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      jj_consume_token(34);
      left = Param();
      jj_consume_token(35);
      right = Param();
      jj_consume_token(36);
                {if (true) return new Subtraction(left, right);}
      break;
    case TIMES:
      jj_consume_token(TIMES);
      jj_consume_token(34);
      left = Param();
      jj_consume_token(35);
      right = Param();
      jj_consume_token(36);
                {if (true) return new Multiplication(left, right);}
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
      jj_consume_token(34);
      left = Param();
      jj_consume_token(35);
      right = Param();
      jj_consume_token(36);
                {if (true) return new Division(left, right);}
      break;
    case IS:
      jj_consume_token(IS);
      jj_consume_token(34);
      left = Param();
      jj_consume_token(35);
      right = Param();
      jj_consume_token(36);
                {if (true) return new Is(left, right);}
      break;
    case GT:
      jj_consume_token(GT);
      jj_consume_token(34);
      left = Param();
      jj_consume_token(35);
      right = Param();
      jj_consume_token(36);
                {if (true) return new GreaterThan(left, right);}
      break;
    case GTE:
      jj_consume_token(GTE);
      jj_consume_token(34);
      left = Param();
      jj_consume_token(35);
      right = Param();
      jj_consume_token(36);
                {if (true) return new GreaterThanOrEqualTo(left, right);}
      break;
    case LT:
      jj_consume_token(LT);
      jj_consume_token(34);
      left = Param();
      jj_consume_token(35);
      right = Param();
      jj_consume_token(36);
                {if (true) return new LessThan(left, right);}
      break;
    case LTE:
      jj_consume_token(LTE);
      jj_consume_token(34);
      left = Param();
      jj_consume_token(35);
      right = Param();
      jj_consume_token(36);
                {if (true) return new LessThanOrEqualTo(left, right);}
      break;
    case EQ:
      jj_consume_token(EQ);
      jj_consume_token(34);
      left = Param();
      jj_consume_token(35);
      right = Param();
      jj_consume_token(36);
                {if (true) return new EqualTo(left, right);}
      break;
    case NEQ:
      jj_consume_token(NEQ);
      jj_consume_token(34);
      left = Param();
      jj_consume_token(35);
      right = Param();
      jj_consume_token(36);
                {if (true) return new NotEqualTo(left, right);}
      break;
    case AEQ:
      jj_consume_token(AEQ);
      jj_consume_token(34);
      left = Param();
      jj_consume_token(35);
      right = Param();
      jj_consume_token(36);
                {if (true) return new ArithmeticEqualTo(left, right);}
      break;
    case ANEQ:
      jj_consume_token(ANEQ);
      jj_consume_token(34);
      left = Param();
      jj_consume_token(35);
      right = Param();
      jj_consume_token(36);
                {if (true) return new ArithmeticNotEqualTo(left, right);}
      break;
    case NAF:
      jj_consume_token(NAF);
      jj_consume_token(34);
      operand = Param();
      jj_consume_token(36);
                {if (true) return new NegationAsFailure(operand);}
      break;
    case NONVAR:
      jj_consume_token(NONVAR);
      jj_consume_token(34);
      operand = Param();
      jj_consume_token(36);
                {if (true) return new Nonvar(operand);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Constant Term() throws ParseException {
        Token idn;
        Token neg = null;
        ElementList params = null;
    if (jj_2_1(2)) {
      neg = jj_consume_token(NEG);
    } else {
      ;
    }
    idn = jj_consume_token(IDN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
      params = ParamList();
      jj_consume_token(36);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
                if (params==null) {
                        if (neg == null) {
                                {if (true) return new Constant(idn.image);}
                        } else {
                                {if (true) return new Constant(idn.image).negation();}
                        }
                } else {
                        if (neg == null) {
                                {if (true) return new org.aspic.inference.Term(idn.image, params);}
                        } else {
                                {if (true) return new org.aspic.inference.Term(idn.image, params).negation();}
                        }
                }
    throw new Error("Missing return statement in function");
  }

  final public ConstantList TermList() throws ParseException {
        ConstantList list = new ConstantList();
        Constant t1;
        Constant t2 = null;
    t1 = TermOrBuiltIn();
                               list.add(t1);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
      jj_consume_token(35);
      t2 = TermOrBuiltIn();
                                                                            list.add(t2);
    }
                                                                                                 {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ElementList ParamList() throws ParseException {
        ElementList list = new ElementList();
        Element p1;
        Element p2 = null;
    p1 = Param();
                        list.add(p1);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      jj_consume_token(35);
      p2 = Param();
                                                              list.add(p2);
    }
                                                                                   {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Element Param() throws ParseException {
        Token var;
        Token numint;
        Token numfloat;
        Constant term;
        BuiltIn builtIn;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      var = jj_consume_token(VAR);
                      {if (true) return new Variable(var.image);}
      break;
    case FLOAT:
      numfloat = jj_consume_token(FLOAT);
                             {if (true) return new ConstantFloat(Double.valueOf(numfloat.image));}
      break;
    case INT:
      numint = jj_consume_token(INT);
                         {if (true) return new ConstantInteger(Integer.valueOf(numint.image));}
      break;
    case NEG:
    case IDN:
      term = Term();
                        {if (true) return term;}
      break;
    case PLUS:
    case MINUS:
    case TIMES:
    case DIVIDE:
    case GT:
    case LT:
    case GTE:
    case LTE:
    case IS:
    case EQ:
    case NEQ:
    case AEQ:
    case ANEQ:
    case NONVAR:
    case NAF:
      builtIn = BuiltIn();
                          {if (true) return builtIn;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(NEG)) return true;
    return false;
  }

  public PrologSyntaxTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x84008000,0x80000000,0x10000,0x20000000,0x40000000,0x40000000,0x7fefe00,0x7fefe00,0x3fe7e00,0x0,0x0,0x0,0x3ffefe00,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x8,0x8,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PrologSyntax(java.io.InputStream stream) {
     this(stream, null);
  }
  public PrologSyntax(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PrologSyntaxTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PrologSyntax(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PrologSyntaxTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PrologSyntax(PrologSyntaxTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PrologSyntaxTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[37];
    for (int i = 0; i < 37; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
